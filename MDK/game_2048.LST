C51 COMPILER V9.60.0.0   GAME_2048                                                         01/08/2021 22:17:33 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GAME_2048
OBJECT MODULE PLACED IN .\Out_File\game_2048.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\User\game_2048.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Device;..\L
                    -ibraries;..\User) DEBUG OBJECTEXTEND PRINT(.\game_2048.lst) OBJECT(.\Out_File\game_2048.obj)

line level    source

   1          #include "game_2048.h"
   2          
   3          // 2048游戏数据
   4          uint16 data2048[4][4];
   5          uint16 Target = 2048;
   6          int score, best;
   7          enum{
   8              S_FAIL = 0,
   9              S_WIN,
  10              S_NORMAL,
  11              S_QUIT
  12          }gameStatus;
  13          
  14          // "2048" 字模(32x32)
  15          uint8 str_2048[] = {
  16              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  17              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x38,0x78,
  18              0x00,0x00,0x70,0x38,0x00,0x00,0xF0,0x38,0x00,0x00,0xF0,0x78,0x00,0x00,0xF0,0x78,
  19              0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0xE0,0x00,0x00,0x01,0xC0,0x00,0x00,0x03,0x80,
  20              0x00,0x00,0x07,0x00,0x00,0x00,0x0E,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x70,0x00,
  21              0x00,0x00,0xE0,0x00,0x00,0x01,0x80,0x00,0x00,0x03,0x01,0x80,0x00,0x0E,0x03,0x00,
  22              0x00,0x1C,0x06,0x00,0x00,0x3F,0xFE,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,
  23              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*２*/
  24              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  25              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xE0,0x00,0x00,0x1C,0x70,
  26              0x00,0x00,0x38,0x70,0x00,0x00,0x70,0x70,0x00,0x00,0x60,0x70,0x00,0x00,0xE0,0x70,
  27              0x00,0x00,0xE0,0x70,0x00,0x01,0xC0,0xE0,0x00,0x01,0xC0,0xE0,0x00,0x03,0x80,0xE0,
  28              0x00,0x03,0x81,0xC0,0x00,0x03,0x81,0xC0,0x00,0x07,0x03,0xC0,0x00,0x07,0x03,0x80,
  29              0x00,0x07,0x03,0x80,0x00,0x07,0x07,0x00,0x00,0x0F,0x07,0x00,0x00,0x0E,0x0E,0x00,
  30              0x00,0x06,0x1C,0x00,0x00,0x07,0x38,0x00,0x00,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,
  31              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*０*/
  32              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  33              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0xE0,
  34              0x00,0x00,0x01,0xE0,0x00,0x00,0x03,0xE0,0x00,0x00,0x07,0xC0,0x00,0x00,0x0F,0xC0,
  35              0x00,0x00,0x1B,0xC0,0x00,0x00,0x33,0x80,0x00,0x00,0x67,0x80,0x00,0x00,0xC7,0x00,
  36              0x00,0x01,0x87,0x00,0x00,0x03,0x0F,0x00,0x00,0x06,0x0E,0x00,0x00,0x0C,0x0E,0x00,
  37              0x00,0x1F,0xFF,0xC0,0x00,0x3F,0xFF,0xC0,0x00,0x00,0x1C,0x00,0x00,0x00,0x3C,0x00,
  38              0x00,0x00,0x38,0x00,0x00,0x00,0x7C,0x00,0x00,0x03,0xFF,0x00,0x00,0x00,0x00,0x00,
  39              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*４*/
  40              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  41              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x1C,0x38,
  42              0x00,0x00,0x38,0x38,0x00,0x00,0x70,0x38,0x00,0x00,0xF0,0x38,0x00,0x00,0xF0,0x70,
  43              0x00,0x00,0xF0,0x60,0x00,0x00,0xF1,0xC0,0x00,0x00,0x7F,0x80,0x00,0x00,0x3E,0x00,
  44              0x00,0x00,0x7F,0x00,0x00,0x01,0xCF,0x80,0x00,0x03,0x87,0xC0,0x00,0x07,0x03,0xC0,
  45              0x00,0x0E,0x03,0xC0,0x00,0x0C,0x03,0xC0,0x00,0x0C,0x03,0x80,0x00,0x0C,0x07,0x00,
  46              0x00,0x0E,0x0E,0x00,0x00,0x07,0xBC,0x00,0x00,0x01,0xE0,0x00,0x00,0x00,0x00,0x00,
  47              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*８*/
  48          };
  49          
  50          // 随机生成一个2或4
  51          uint8 generate_randNum(){
  52   1          uint8 i, j, value;
  53   1          uint8 t[16], cnt=0;
  54   1          for(i=0; i<4; ++i)
C51 COMPILER V9.60.0.0   GAME_2048                                                         01/08/2021 22:17:33 PAGE 2   

  55   1              for(j=0; j<4; ++j)
  56   1                  if(data2048[i][j] == 0)
  57   1                      t[cnt++] = i*4+j;
  58   1          if(!cnt) return 0;
  59   1          value = t[rand()%cnt];
  60   1          data2048[value/4][value%4] = (rand()%10==1) ? 4 : 2;
  61   1          return 1;
  62   1      }
  63          
  64          // 向左移动
  65          uint8 moveLeft(){
  66   1          int8 i, j, currentWritePos;
  67   1          uint16 lastValue, tmp[4][4];
  68   1          for(i=0; i<4; ++i){
  69   2              currentWritePos = 0;
  70   2              lastValue = 0;
  71   2              for(j=0; j<4; ++j){
  72   3                  tmp[i][j] = data2048[i][j];
  73   3                  if(!data2048[i][j]) continue;
  74   3                  if(lastValue == 0){
  75   4                      lastValue = data2048[i][j];
  76   4                  }else{
  77   4                      if(lastValue == data2048[i][j]){
  78   5                          data2048[i][currentWritePos] = lastValue*2;
  79   5                          lastValue = 0;
  80   5                          if(data2048[i][currentWritePos] == Target) gameStatus = S_WIN;
  81   5                      }else{
  82   5                          data2048[i][currentWritePos] = lastValue;
  83   5                          lastValue = data2048[i][j];
  84   5                      }
  85   4                      ++currentWritePos;
  86   4                  }
  87   3                  data2048[i][j] = 0;
  88   3                  if(lastValue) data2048[i][currentWritePos] = lastValue;
  89   3              }
  90   2          }
  91   1          for(i=0; i<4; ++i)
  92   1              for(j=0; j<4; ++j)
  93   1                  if(data2048[i][j] != tmp[i][j]) return 1;
  94   1          return 0;
  95   1      }
  96          
  97          // 向右移动
  98          uint8 moveRight(){
  99   1          int8 i, j, currentWritePos;
 100   1          uint16 lastValue, tmp[4][4];
 101   1          for(i=0; i<4; ++i){
 102   2              currentWritePos = 3;
 103   2              lastValue = 0;
 104   2              for(j=3; j>=0; --j){
 105   3                  tmp[i][j] = data2048[i][j];
 106   3                  if(!data2048[i][j]) continue;
 107   3                  if(lastValue == 0){
 108   4                      lastValue = data2048[i][j];
 109   4                  }else{
 110   4                      if(lastValue == data2048[i][j]){
 111   5                          data2048[i][currentWritePos] = lastValue*2;
 112   5                          lastValue = 0;
 113   5                          if(data2048[i][currentWritePos] == Target) gameStatus = S_WIN;
 114   5                      }else{
 115   5                          data2048[i][currentWritePos] = lastValue;
 116   5                          lastValue = data2048[i][j];
C51 COMPILER V9.60.0.0   GAME_2048                                                         01/08/2021 22:17:33 PAGE 3   

 117   5                      }
 118   4                      --currentWritePos;
 119   4                  }
 120   3                  data2048[i][j] = 0;
 121   3                  if(lastValue) data2048[i][currentWritePos] = lastValue;
 122   3              }
 123   2          }
 124   1          for(i=0; i<4; ++i)
 125   1              for(j=0; j<4; ++j)
 126   1                  if(data2048[i][j] != tmp[i][j]) return 1;
 127   1          return 0;
 128   1      }
 129          
 130          // 向上移动
 131          uint8 moveUp(){
 132   1          int8 i, j, currentWritePos;
 133   1          uint16 lastValue, tmp[4][4];
 134   1          for(j=0; j<4; ++j){
 135   2              currentWritePos = 0;
 136   2              lastValue = 0;
 137   2              for(i=0; i<4; ++i){
 138   3                  tmp[i][j] = data2048[i][j];
 139   3                  if(!data2048[i][j]) continue;
 140   3                  if(lastValue == 0){
 141   4                      lastValue = data2048[i][j];
 142   4                  }else{
 143   4                      if(lastValue == data2048[i][j]){
 144   5                          data2048[currentWritePos][j] = lastValue*2;
 145   5                          lastValue = 0;
 146   5                          if(data2048[currentWritePos][j] == Target) gameStatus = S_WIN;
 147   5                      }else{
 148   5                          data2048[currentWritePos][j] = lastValue;
 149   5                          lastValue = data2048[i][j];
 150   5                      }
 151   4                      ++currentWritePos;
 152   4                  }
 153   3                  data2048[i][j] = 0;
 154   3                  if(lastValue) data2048[currentWritePos][j] = lastValue;
 155   3              }
 156   2          }
 157   1          for(i=0; i<4; ++i)
 158   1              for(j=0; j<4; ++j)
 159   1                  if(data2048[i][j] != tmp[i][j]) return 1;
 160   1          return 0;
 161   1      }
 162          
 163          // 向下移动
 164          uint8 moveDown(){
 165   1          int8 i, j, currentWritePos;
 166   1          uint16 lastValue, tmp[4][4];
 167   1          for(j=0; j<4; ++j){
 168   2              currentWritePos = 3;
 169   2              lastValue = 0;
 170   2              for(i=3; i>=0; --i){
 171   3                  tmp[i][j] = data2048[i][j];
 172   3                  if(!data2048[i][j]) continue;
 173   3                  if(lastValue == 0){
 174   4                      lastValue = data2048[i][j];
 175   4                  }else{
 176   4                      if(lastValue == data2048[i][j]){
 177   5                          data2048[currentWritePos][j] = lastValue*2;
 178   5                          lastValue = 0;
C51 COMPILER V9.60.0.0   GAME_2048                                                         01/08/2021 22:17:33 PAGE 4   

 179   5                          if(data2048[currentWritePos][j] == Target) gameStatus = S_WIN;
 180   5                      }else{
 181   5                          data2048[currentWritePos][j] = lastValue;
 182   5                          lastValue = data2048[i][j];
 183   5                      }
 184   4                      --currentWritePos;
 185   4                  }
 186   3                  data2048[i][j] = 0;
 187   3                  if(lastValue) data2048[currentWritePos][j] = lastValue;
 188   3              }
 189   2          }
 190   1          for(i=0; i<4; ++i)
 191   1              for(j=0; j<4; ++j)
 192   1                  if(data2048[i][j] != tmp[i][j]) return 1;
 193   1          return 0;
 194   1      }
 195          
 196          // 重新开始游戏
 197          void restart(){
 198   1          uint8 i, j;
 199   1          for(i=0; i<4; ++i)
 200   1              for(j=0; j<4; ++j)
 201   1                  data2048[i][j] = 0;
 202   1          generate_randNum();
 203   1          generate_randNum();
 204   1          gameStatus = S_NORMAL;
 205   1      }
 206          
 207          // 判断游戏结束
 208          uint8 isOver(){
 209   1          uint8 i, j;
 210   1          for (i=0; i<4; ++i){
 211   2              for (j=0; j<4; ++j){
 212   3                  // 有空位或者相邻有一样的都可以继续
 213   3                  if ((j < 3) && (data2048[i][j]*data2048[i][j+1] == 0 || data2048[i][j] == data2048[i][j+1]))
 214   3                      return 0;
 215   3                  if ((i < 3) && (data2048[i][j]*data2048[i+1][j] == 0 || data2048[i][j] == data2048[i+1][j]))
 216   3                      return 0;
 217   3              }
 218   2          }
 219   1          return 1;
 220   1      }
 221          
 222          // 设置测试数据
 223          void setdata(){
 224   1          uint8 i, j;
 225   1          for(i=0; i<4; ++i)
 226   1              for(j=0; j<4; ++j)
 227   1                  data2048[i][j] = 16 << i << j;
 228   1          score = best = 0;
 229   1      }
 230          
 231          // 2048初始化游戏界面
 232          void game2048_init(){
 233   1          uint8 i, j;
 234   1          tft_lcd_clear(TFT_LCD_LGRAY);
 235   1          setdata();
 236   1          tft_lcd_show_font32(4,str_2048,56,8,TFT_LCD_BROWN,TFT_LCD_WHITE,1);
 237   1          tft_lcd_draw_rectangle(19, 91, 221, 293, TFT_LCD_BLACK);
 238   1          tft_lcd_fill_rectangle(20, 92, 220, 292, TFT_LCD_LGRAYBLUE);
 239   1          tft_lcd_draw_rectangle(150, 55, 220, 79, TFT_LCD_BRRED);
 240   1          tft_lcd_fill_rectangle(151, 56, 219, 78, TFT_LCD_LIGHTBLUE);
C51 COMPILER V9.60.0.0   GAME_2048                                                         01/08/2021 22:17:33 PAGE 5   

 241   1          tft_lcd_show_string(161,61,"New Game",TFT_LCD_WHITE,TFT_LCD_LIGHTBLUE,12,1);
 242   1          for(i=0; i<5; ++i){
 243   2              tft_lcd_draw_line(20, 92+50*i, 220, 92+50*i, TFT_LCD_GRAYBLUE);
 244   2              tft_lcd_draw_line(20+50*i, 92, 20+50*i, 292, TFT_LCD_GRAYBLUE);
 245   2          }
 246   1          for(i=0; i<4; ++i)
 247   1              for(j=0; j<4; ++j)
 248   1                  tft_lcd_draw_rectangle(23+j*50, 95+i*50, 67+j*50, 139+i*50, TFT_LCD_LIGHTBLUE);
 249   1      
 250   1          gameStatus = S_NORMAL;
 251   1          setdata();
 252   1      }
 253          
 254          // 字符：0   1   2   3   4   5   6   7   8   9   #   *   w(+) s(/) a(-) d(x) ok
 255          // IR  ：13  0   1   2   4   5   6   8   9   10  14  12  17   25   20   22   21
 256          // 按键：0   1   2   3   4   5   6   7   8   9   35  42  43   47   45   120  -
 257          // 处理输入
 258          void game2048_updateStatus(uint8 key){
 259   1          uint8 updated = 0;
 260   1          switch(key){
 261   2              case 12:
 262   2                  gameStatus = S_QUIT;
 263   2                  break;
 264   2              case 14:
 265   2                  restart();
 266   2                  break;
 267   2              case 20:
 268   2                  if(gameStatus == S_NORMAL) updated = moveLeft();
 269   2                  break;
 270   2              case 22:
 271   2                  if(gameStatus == S_NORMAL) updated = moveRight();
 272   2                  break;
 273   2              case 17:
 274   2                  if(gameStatus == S_NORMAL) updated = moveUp();
 275   2                  break;
 276   2              case 25:
 277   2                  if(gameStatus == S_NORMAL) updated = moveDown();
 278   2                  break;
 279   2          }
 280   1          if(updated){
 281   2              generate_randNum();
 282   2              if(isOver()) gameStatus = S_FAIL;
 283   2          }
 284   1      }
 285          
 286          // 运行游戏
 287          void game2048_run(){
 288   1          uint8 buf[50], slen;
 289   1          uint8 i, j;
 290   1          
 291   1          if(gameStatus != S_QUIT){
 292   2              // 显示历史最高分、当前得分
 293   2              sprintf(buf, "Best :%7d", best);
 294   2              tft_lcd_show_string(20,50,buf,TFT_LCD_BRRED,TFT_LCD_LGRAY,16,0);
 295   2              sprintf(buf, "Score:%7d", score);
 296   2              tft_lcd_show_string(20,68,buf,TFT_LCD_BRRED,TFT_LCD_LGRAY,16,0);
 297   2              
 298   2              // 显示各格内数据
 299   2              for(i=0; i<4; ++i){
 300   3                  for(j=0; j<4; ++j){
 301   4                      if(data2048[i][j]){
 302   5                          switch(data2048[i][j]){
C51 COMPILER V9.60.0.0   GAME_2048                                                         01/08/2021 22:17:33 PAGE 6   

 303   6                              case 2:
 304   6                                  tft_lcd_fill_rectangle(24+j*50, 96+i*50, 66+j*50, 138+i*50, TFT_LCD_LIGHTGREEN
             -);
 305   6                                  break;
 306   6                              case 4:
 307   6                                  tft_lcd_fill_rectangle(24+j*50, 96+i*50, 66+j*50, 138+i*50, TFT_LCD_BRRED);
 308   6                                  break;
 309   6                              case 8:
 310   6                                  tft_lcd_fill_rectangle(24+j*50, 96+i*50, 66+j*50, 138+i*50, TFT_LCD_GREEN);
 311   6                                  break;
 312   6                              case 16:
 313   6                                  tft_lcd_fill_rectangle(24+j*50, 96+i*50, 66+j*50, 138+i*50, TFT_LCD_DARKBLUE);
 314   6                                  break;
 315   6                              case 32:
 316   6                                  tft_lcd_fill_rectangle(24+j*50, 96+i*50, 66+j*50, 138+i*50, TFT_LCD_BLUE);
 317   6                                  break;
 318   6                              case 64:
 319   6                                  tft_lcd_fill_rectangle(24+j*50, 96+i*50, 66+j*50, 138+i*50, TFT_LCD_RED);
 320   6                                  break;
 321   6                              case 128:
 322   6                                  tft_lcd_fill_rectangle(24+j*50, 96+i*50, 66+j*50, 138+i*50, TFT_LCD_BRED);
 323   6                                  break;
 324   6                              case 256:
 325   6                                  tft_lcd_fill_rectangle(24+j*50, 96+i*50, 66+j*50, 138+i*50, TFT_LCD_BROWN);
 326   6                                  break;
 327   6                              case 512:
 328   6                                  tft_lcd_fill_rectangle(24+j*50, 96+i*50, 66+j*50, 138+i*50, TFT_LCD_LBBLUE);
 329   6                                  break;
 330   6                              case 1024:
 331   6                                  tft_lcd_fill_rectangle(24+j*50, 96+i*50, 66+j*50, 138+i*50, TFT_LCD_GRAY);
 332   6                                  break;
 333   6                              case 2048:
 334   6                                  tft_lcd_fill_rectangle(24+j*50, 96+i*50, 66+j*50, 138+i*50, TFT_LCD_BLACK);
 335   6                                  break;
 336   6                          }
 337   5                          sprintf(buf, "%d", (int)data2048[i][j]);
 338   5                          slen = strlen(buf);
 339   5                          tft_lcd_show_string(45+50*j-4*slen,109+50*i,buf,TFT_LCD_WHITE,TFT_LCD_LGRAYBLUE,16,1);
 340   5                      }else{
 341   5                          tft_lcd_fill_rectangle(24+j*50, 96+i*50, 66+j*50, 138+i*50, TFT_LCD_LGRAYBLUE);
 342   5                      }
 343   4                  }
 344   3              }
 345   2              
 346   2              if(gameStatus == S_WIN)
 347   2                  tft_lcd_show_string(36,300,"          You Win !         ",TFT_LCD_RED,TFT_LCD_LGRAY,12,0);
 348   2              else if(gameStatus == S_FAIL)
 349   2                  tft_lcd_show_string(36,300,"          You Lose!         ",TFT_LCD_RED,TFT_LCD_LGRAY,12,0);
 350   2              else
 351   2                  tft_lcd_show_string(36,300,"Join the tiles, get to 2048!",TFT_LCD_GRAY,TFT_LCD_LGRAY,12,0);
 352   2          }
 353   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6158    ----
   CONSTANT SIZE    =    119    ----
   XDATA SIZE       =    551     220
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.60.0.0   GAME_2048                                                         01/08/2021 22:17:33 PAGE 7   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
